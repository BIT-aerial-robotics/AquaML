from typing import TYPE_CHECKING

import abc

if TYPE_CHECKING:
    from AquaML.rl_algo import BaseRLAgent


class BaseWorker(abc.ABC):
    '''
    Base class for all workers.

    '''

    def __init__(self):
        '''
        Initialize the worker.

        '''
        pass

    def step(self, action: dict)-> tuple:
        '''
        Interact with the environment,the action is generated by the agent.
        Then return the next state, reward, done, and info.
        Last, get all the information and store them in the replay buffer.
        
        :param action: The action to take.
        :type action: dict{str: tensor or numpy.array} or tensor or numpy.array.
        
        :return: The next state, reward, done, and info.
        :rtype: dict{str: tensor or numpy.array}, tensor or numpy.array, tensor or numpy.array, dict{str: tensor or numpy.array}.
        '''

        env = self.getEnv()

        next_state, reward, done, info = env.step(action)

        return next_state, reward, done, info

    @abc.abstractmethod
    def run(self):
        '''
        Run the worker, get the state from the environment, and input it to the agent to get the action.
        Store the state, action, reward, next state, done, and info in the replay buffer.
        '''
